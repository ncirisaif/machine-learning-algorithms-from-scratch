{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import random\n",
    "\n",
    "#for plotting\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "class CustomSVM:\n",
    "\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "\n",
    "    #Use the data and find a 'model' ie the values for W and b. Maximize b and minimize b\n",
    "    def fit(self, dataset):\n",
    "        self.dataset = dataset\n",
    "\n",
    "        # Magnitude of W is the key, list of W and b is the value\n",
    "        options = {}\n",
    "\n",
    "\n",
    "        all_feature_values = []\n",
    "\n",
    "        for yi, attrs in self.dataset.items():\n",
    "            for attr in attrs:\n",
    "                for f in attr:\n",
    "                    all_feature_values.append(f)\n",
    "\n",
    "        self.max_attr = max(all_feature_values)\n",
    "        self.min_attr = min(all_feature_values)\n",
    "        del all_feature_values\n",
    "\n",
    "        step_size = [self.max_attr * 0.1,self.max_attr * 0.01,self.max_attr * 0.005]\n",
    "        latest_optimum = 10 * self.max_attr\n",
    "\n",
    "        b_range = 5\n",
    "        b_multiple = 5\n",
    "\n",
    "        trans =  [[1, 1, 1, 1], [1, 1, 1, -1], [1, 1,-1, 1], [1, 1,-1,-1], [1 ,-1, 1, 1], [1 ,-1, -1, 1], [1 ,-1, 1, -1], [1 ,-1, -1, -1], [-1, 1, 1, 1], [-1, 1, 1, -1], [-1, 1, -1, 1], [-1, 1, -1, -1], [-1,-1, 1, 1], [-1,-1, 1, -1], [-1,-1, -1, 1], [-1,-1, -1, -1]]\n",
    "\n",
    "        for step in step_size:\n",
    "            W = np.array([latest_optimum,latest_optimum, latest_optimum, latest_optimum])\n",
    "            optimization_flag = False\n",
    "\n",
    "            while not optimization_flag:\n",
    "                for b in np.arange(-1*(self.max_attr* b_range ), self.max_attr * b_range, step * b_multiple):\n",
    "                    for transformation in trans:\n",
    "                        W_t = W * transformation\n",
    "                        found = True\n",
    "                        for yi, attributes in self.dataset.items():\n",
    "                            for xi in attributes:\n",
    "                                if not (yi * (np.dot(xi, W_t)  +b )) >= 1:\n",
    "                                    found = False\n",
    "                                    break\n",
    "                        if found:\n",
    "                            options[np.linalg.norm(W_t)] = [W_t, b]\n",
    "                if W[0]<0:\n",
    "                    optimization_flag = True\n",
    "                else:\n",
    "                    W = np.array(list(map(lambda w: w-step, W)))\n",
    "\n",
    "            norms = min([n for n in options])\n",
    "            self.W = options[norms][0]\n",
    "            self.b = options[norms][1]\n",
    "\n",
    "            latest_optimum = options[norms][0][0] + step*2\n",
    "\n",
    "    def predict(self, attrs):\n",
    "        #sign of the X(i).W + b defines the class\n",
    "        dot_product = np.dot(np.array(attrs), self.W)\n",
    "        classification = np.sign(dot_product + self.b)\n",
    "\n",
    "        return classification\n",
    "\n",
    "    def test(self, test_set):\n",
    "        self.accurate_predictions, self.total_predictions = 0, 0 \n",
    "        for group in test_set:\n",
    "            for data in test_set[group]:\n",
    "                predicted_class = self.predict(data)\n",
    "                if predicted_class == group:\n",
    "                    self.accurate_predictions += 1\n",
    "                self.total_predictions += 1\n",
    "        self.accuracy = 100*(self.accurate_predictions/self.total_predictions)\n",
    "        print(\"\\nAcurracy :\", str(self.accuracy) + \"%\")\n",
    "\n",
    "def main():\n",
    "\n",
    "    df = pd.read_csv(r\"data/iris.csv\") #Reading from the data file\n",
    "\n",
    "    df.replace('Iris-setosa', -1, inplace = True)\n",
    "    df.replace('Iris-versicolor', 1, inplace = True)\n",
    "\n",
    "    dataset = df.astype(float).values.tolist()\n",
    "    #Shuffle the dataset\n",
    "\n",
    "    random.shuffle(dataset)\n",
    "\n",
    "    #20% of the available data will be used for testing\n",
    "\n",
    "    test_size = 0.20\n",
    "\n",
    "    #The keys of the dict are the classes that the data is classfied into\n",
    "\n",
    "    training_set = {-1: [], 1:[]}\n",
    "    test_set = {-1: [], 1:[]}\n",
    "    training_data = dataset[:-int(test_size * len(dataset))]\n",
    "    test_data = dataset[-int(test_size * len(dataset)):]\n",
    "\n",
    "    for record in training_data:\n",
    "        #Append the list in the dict will all the elements of the record except the class\n",
    "        training_set[record[-1]].append(record[:-1])\n",
    "        #Insert data into the test set\n",
    "\n",
    "    for record in test_data:\n",
    "        # Append the list in the dict will all the elements of the record except the class\n",
    "        test_set[record[-1]].append(record[:-1])\n",
    "\n",
    "    dataset = { -1 : np.array([[2,3],[4,5],[2,1]]), 1: np.array([[5,6], [8,8], [9,9]]) }\n",
    "    svm = CustomSVM()\n",
    "\n",
    "    svm.fit(dataset = training_set)\n",
    "    svm.test(test_set)\n",
    "if __name__ == \"__main__\":\n",
    "    \n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
